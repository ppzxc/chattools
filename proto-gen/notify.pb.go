// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: notify.proto

package proto_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CTRL //
type RequestNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	NotifyId   int64   `protobuf:"varint,2,opt,name=notify_id,json=notifyId,proto3" json:"notify_id,omitempty"`
	TopicId    int64   `protobuf:"varint,3,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Message    string  `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	SequenceId int64   `protobuf:"varint,5,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	UserIds    []int64 `protobuf:"varint,6,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	UserId     int64   `protobuf:"varint,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type       string  `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Custom     []byte  `protobuf:"bytes,9,opt,name=custom,proto3" json:"custom,omitempty"`
}

func (x *RequestNotification) Reset() {
	*x = RequestNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notify_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestNotification) ProtoMessage() {}

func (x *RequestNotification) ProtoReflect() protoreflect.Message {
	mi := &file_notify_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestNotification.ProtoReflect.Descriptor instead.
func (*RequestNotification) Descriptor() ([]byte, []int) {
	return file_notify_proto_rawDescGZIP(), []int{0}
}

func (x *RequestNotification) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RequestNotification) GetNotifyId() int64 {
	if x != nil {
		return x.NotifyId
	}
	return 0
}

func (x *RequestNotification) GetTopicId() int64 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *RequestNotification) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RequestNotification) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *RequestNotification) GetUserIds() []int64 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *RequestNotification) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RequestNotification) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RequestNotification) GetCustom() []byte {
	if x != nil {
		return x.Custom
	}
	return nil
}

type ResponseNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	IsMe         bool          `protobuf:"varint,2,opt,name=is_me,json=isMe,proto3" json:"is_me,omitempty"`
	Notification *Notification `protobuf:"bytes,3,opt,name=Notification,proto3" json:"Notification,omitempty"`
	Result       *Result       `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ResponseNotification) Reset() {
	*x = ResponseNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notify_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseNotification) ProtoMessage() {}

func (x *ResponseNotification) ProtoReflect() protoreflect.Message {
	mi := &file_notify_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseNotification.ProtoReflect.Descriptor instead.
func (*ResponseNotification) Descriptor() ([]byte, []int) {
	return file_notify_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseNotification) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ResponseNotification) GetIsMe() bool {
	if x != nil {
		return x.IsMe
	}
	return false
}

func (x *ResponseNotification) GetNotification() *Notification {
	if x != nil {
		return x.Notification
	}
	return nil
}

func (x *ResponseNotification) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_notify_proto protoreflect.FileDescriptor

var file_notify_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x1a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22, 0xbe, 0x01, 0x0a,
	0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x65,
	0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x69, 0x73, 0x4d, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xd5, 0x02,
	0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x52, 0x0a,
	0x0d, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x00, 0x12, 0x50, 0x0a, 0x0b, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x75, 0x64,
	0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x72,
	0x75, 0x64, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d,
	0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_notify_proto_rawDescOnce sync.Once
	file_notify_proto_rawDescData = file_notify_proto_rawDesc
)

func file_notify_proto_rawDescGZIP() []byte {
	file_notify_proto_rawDescOnce.Do(func() {
		file_notify_proto_rawDescData = protoimpl.X.CompressGZIP(file_notify_proto_rawDescData)
	})
	return file_notify_proto_rawDescData
}

var file_notify_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_notify_proto_goTypes = []interface{}{
	(*RequestNotification)(nil),  // 0: proto_gen.RequestNotification
	(*ResponseNotification)(nil), // 1: proto_gen.ResponseNotification
	(*Header)(nil),               // 2: proto_gen.Header
	(*Notification)(nil),         // 3: proto_gen.Notification
	(*Result)(nil),               // 4: proto_gen.Result
}
var file_notify_proto_depIdxs = []int32{
	2, // 0: proto_gen.RequestNotification.header:type_name -> proto_gen.Header
	2, // 1: proto_gen.ResponseNotification.header:type_name -> proto_gen.Header
	3, // 2: proto_gen.ResponseNotification.Notification:type_name -> proto_gen.Notification
	4, // 3: proto_gen.ResponseNotification.result:type_name -> proto_gen.Result
	0, // 4: proto_gen.Notificator.MentionCreate:input_type -> proto_gen.RequestNotification
	0, // 5: proto_gen.Notificator.MentionCrud:input_type -> proto_gen.RequestNotification
	0, // 6: proto_gen.Notificator.ReplyCreate:input_type -> proto_gen.RequestNotification
	0, // 7: proto_gen.Notificator.ReplyCrud:input_type -> proto_gen.RequestNotification
	1, // 8: proto_gen.Notificator.MentionCreate:output_type -> proto_gen.ResponseNotification
	1, // 9: proto_gen.Notificator.MentionCrud:output_type -> proto_gen.ResponseNotification
	1, // 10: proto_gen.Notificator.ReplyCreate:output_type -> proto_gen.ResponseNotification
	1, // 11: proto_gen.Notificator.ReplyCrud:output_type -> proto_gen.ResponseNotification
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_notify_proto_init() }
func file_notify_proto_init() {
	if File_notify_proto != nil {
		return
	}
	file_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_notify_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notify_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_notify_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_notify_proto_goTypes,
		DependencyIndexes: file_notify_proto_depIdxs,
		MessageInfos:      file_notify_proto_msgTypes,
	}.Build()
	File_notify_proto = out.File
	file_notify_proto_rawDesc = nil
	file_notify_proto_goTypes = nil
	file_notify_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NotificatorClient is the client API for Notificator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificatorClient interface {
	MentionCreate(ctx context.Context, in *RequestNotification, opts ...grpc.CallOption) (*ResponseNotification, error)
	MentionCrud(ctx context.Context, in *RequestNotification, opts ...grpc.CallOption) (*ResponseNotification, error)
	ReplyCreate(ctx context.Context, in *RequestNotification, opts ...grpc.CallOption) (*ResponseNotification, error)
	ReplyCrud(ctx context.Context, in *RequestNotification, opts ...grpc.CallOption) (*ResponseNotification, error)
}

type notificatorClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificatorClient(cc grpc.ClientConnInterface) NotificatorClient {
	return &notificatorClient{cc}
}

func (c *notificatorClient) MentionCreate(ctx context.Context, in *RequestNotification, opts ...grpc.CallOption) (*ResponseNotification, error) {
	out := new(ResponseNotification)
	err := c.cc.Invoke(ctx, "/proto_gen.Notificator/MentionCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificatorClient) MentionCrud(ctx context.Context, in *RequestNotification, opts ...grpc.CallOption) (*ResponseNotification, error) {
	out := new(ResponseNotification)
	err := c.cc.Invoke(ctx, "/proto_gen.Notificator/MentionCrud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificatorClient) ReplyCreate(ctx context.Context, in *RequestNotification, opts ...grpc.CallOption) (*ResponseNotification, error) {
	out := new(ResponseNotification)
	err := c.cc.Invoke(ctx, "/proto_gen.Notificator/ReplyCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificatorClient) ReplyCrud(ctx context.Context, in *RequestNotification, opts ...grpc.CallOption) (*ResponseNotification, error) {
	out := new(ResponseNotification)
	err := c.cc.Invoke(ctx, "/proto_gen.Notificator/ReplyCrud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificatorServer is the server API for Notificator service.
type NotificatorServer interface {
	MentionCreate(context.Context, *RequestNotification) (*ResponseNotification, error)
	MentionCrud(context.Context, *RequestNotification) (*ResponseNotification, error)
	ReplyCreate(context.Context, *RequestNotification) (*ResponseNotification, error)
	ReplyCrud(context.Context, *RequestNotification) (*ResponseNotification, error)
}

// UnimplementedNotificatorServer can be embedded to have forward compatible implementations.
type UnimplementedNotificatorServer struct {
}

func (*UnimplementedNotificatorServer) MentionCreate(context.Context, *RequestNotification) (*ResponseNotification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MentionCreate not implemented")
}
func (*UnimplementedNotificatorServer) MentionCrud(context.Context, *RequestNotification) (*ResponseNotification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MentionCrud not implemented")
}
func (*UnimplementedNotificatorServer) ReplyCreate(context.Context, *RequestNotification) (*ResponseNotification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyCreate not implemented")
}
func (*UnimplementedNotificatorServer) ReplyCrud(context.Context, *RequestNotification) (*ResponseNotification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyCrud not implemented")
}

func RegisterNotificatorServer(s *grpc.Server, srv NotificatorServer) {
	s.RegisterService(&_Notificator_serviceDesc, srv)
}

func _Notificator_MentionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificatorServer).MentionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_gen.Notificator/MentionCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificatorServer).MentionCreate(ctx, req.(*RequestNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notificator_MentionCrud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificatorServer).MentionCrud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_gen.Notificator/MentionCrud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificatorServer).MentionCrud(ctx, req.(*RequestNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notificator_ReplyCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificatorServer).ReplyCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_gen.Notificator/ReplyCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificatorServer).ReplyCreate(ctx, req.(*RequestNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notificator_ReplyCrud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificatorServer).ReplyCrud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_gen.Notificator/ReplyCrud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificatorServer).ReplyCrud(ctx, req.(*RequestNotification))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notificator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto_gen.Notificator",
	HandlerType: (*NotificatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MentionCreate",
			Handler:    _Notificator_MentionCreate_Handler,
		},
		{
			MethodName: "MentionCrud",
			Handler:    _Notificator_MentionCrud_Handler,
		},
		{
			MethodName: "ReplyCreate",
			Handler:    _Notificator_ReplyCreate_Handler,
		},
		{
			MethodName: "ReplyCrud",
			Handler:    _Notificator_ReplyCrud_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notify.proto",
}
